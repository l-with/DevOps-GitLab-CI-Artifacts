.before_script_secrets_vars: 
  before_script:
    - cd ${TF_ROOT}
    - pwd
    - >
      echo ENVIRONMENT: ${ENVIRONMENT}
    - >
      if [ -f "secrets/default.yml" ]; then
        vault_secrets.sh secrets/default.yml --debug >.secrets && . .secrets && rm .secrets
      fi
    - >
      if [ -f "secrets/${ENVIRONMENT}.yml" ]; then
        vault_secrets.sh secrets/${ENVIRONMENT}.yml >.secrets && . .secrets && rm .secrets
      fi
    - >
      if [ -f "$CI_PROJECT_DIR/environment/default.env" ]; then
        set -a && cat $CI_PROJECT_DIR/environment/default.env | envsubst | grep --invert-match --extended-regexp --regexp "=(''|\"\"){0,1}$" --regexp "=(''|\"\"){0,1}\s*#.*$" >.env && cat .env && . .env && rm .env && set +a
      fi
    - >
      if [ -f "$CI_PROJECT_DIR/environment/${ENVIRONMENT}.env" ]; then
        set -a && cat $CI_PROJECT_DIR/environment/${ENVIRONMENT}.env | envsubst | egrep --invert-match --extended-regexp --regexp "=(''|\"\"){0,1}$" --regexp "=(''|\"\"){0,1}\s*#.*$"  >.env && cat .env && . .env && rm .env && set +a
      fi
    - download-secure-files
    - >
      for env_file in .secure_files/*.env; do 
        set -a && source $env_file && set +a
      done

.before_script_secure_files:
  before_script:
    - cd ${TF_ROOT}
    - download-secure-files

.before_script_secrets_env_files: 
  before_script:
    - cd ${TF_ROOT}
    - download-secure-files
    - >
      for env_file in .secure_files/*.env; do 
        set -a && source $env_file && set +a
      done

.before_script_vault_token:
  before_script:
  - echo VAULT_ADDR $VAULT_ADDR
  - source vault_token.sh ${VAULT_TOKEN_ROLE}

.before_script_ssh_move_secure_file_id:
  before_script:
  - cd $TF_ROOT
  - export _ID=${ID:-id}
  - cp -p .secure_files/${_ID} .
  - cp -p .secure_files/${_ID}.pub .
  - chmod g-rwx,o-rwx ${_ID}

.before_script_ssh_prepare_id:
  before_script:
  - export _ID=${ID:-id}
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ${_ID}
  - chmod g-rwx,o-rwx ${_ID}

.before_script_ssh_prepare_id_pub: 
  before_script:
  - export _ID=${ID:-id}
  - echo "$SSH_PUBLIC_KEY" | tr -d '\r' > ${_ID}.pub

.before_script_ssh_generate_id: 
  before_script:
  - export _ID=${ID:-id}
  - ssh-keygen -t ed25519 -N '' -f ${_ID} >/dev/null 2>&1  
  - chmod g-rwx,o-rwx ${_ID}

.before_script_ssh_sign_id: 
  before_script:
  - export _ID=${ID:-id}
  - export _VAULT_SSH_SIGNER_PATH=${VAULT_SSH_SIGNER_PATH:-ssh-client-signer/sign/ssh-client-signer-gitlab}
  - export _VAULT_SSH_SIGNER_PRINCIPALS=${VAULT_SSH_SIGNER_PRINCIPALS:-root}
  - source vault_token.sh $VAULT_SSH_SIGN_ROLE
  - export SSH_KEY_CERT="$(vault write -field=signed_key ${_VAULT_SSH_SIGNER_PATH} valid_principals="${_VAULT_SSH_SIGNER_PRINCIPALS}" public_key=@./${_ID}.pub)"
  - echo "$SSH_KEY_CERT" | tr -d '\r' > ${_ID}-cert.pub

.before_script_ssh_agent_add_id: 
  before_script:
  - export _ID=${ID:-id}
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-add ${_ID}

.before_script_ssh_agent_add_id_passphrase: 
  before_script:
  - export _ID=${ID:-id}
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - |
    { sleep .1; echo $SSH_PASSPHRASE; } | script -q /dev/null -c 'ssh-add ${_ID}'
  - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

.before_script_ansible_requirements:
  before_script:
  - cd $TF_ROOT
  - rm -rvf $ANSIBLE_ROLES_PATH
  - ansible-galaxy role install --role-file $ANSIBLE_PATH/ansible-requirements.yml
  - rm -rf $ANSIBLE_COLLECTIONS_PATH
  - ansible-galaxy collection install --requirements-file $ANSIBLE_PATH/ansible-requirements.yml --timeout $ANSIBLE_GALAXY_TIMEOUT
  - export LE_CERT_PACKAGE_URL_TEMPLATE="${CI_API_V4_URL}/projects/${LE_PROJECT_ID}/packages/generic/le-certs/42/le_#_le_FQDN_#.zip"

.before_script_echo_CI_COMMIT:
  .before_script:
    - >
      echo CI_COMMIT_AUTHOR: ${CI_COMMIT_AUTHOR}
    - >
      echo CI_COMMIT_BEFORE_SHA: ${CI_COMMIT_BEFORE_SHA}
    - >
      echo CI_COMMIT_BRANCH: ${CI_COMMIT_BRANCH}
    - >
      echo CI_COMMIT_DESCRIPTION: ${CI_COMMIT_DESCRIPTION}
    - >
      echo CI_COMMIT_MESSAGE: ${CI_COMMIT_MESSAGE}
    - >
      echo CI_COMMIT_REF_NAME: ${CI_COMMIT_REF_NAME}
    - >
      echo CI_COMMIT_REF_PROTECTED: ${CI_COMMIT_REF_PROTECTED}
    - >
      echo CI_COMMIT_REF_SLUG: ${CI_COMMIT_REF_SLUG}
    - >
      echo CI_COMMIT_SHA: ${CI_COMMIT_SHA}
    - >
      echo CI_COMMIT_SHORT_SHA: ${CI_COMMIT_SHORT_SHA}
    - >
      echo CI_COMMIT_TAG_MESSAGE: ${CI_COMMIT_TAG_MESSAGE}
    - >
      echo CI_COMMIT_TAG: ${CI_COMMIT_TAG}
    - >
      echo CI_COMMIT_TAG_MESSAGE: ${CI_COMMIT_TAG_MESSAGE}

variables:
  TRIVY_USERNAME: "$CI_REGISTRY_USER"
  TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
  TRIVY_AUTH_URL: "$CI_REGISTRY"
  TRIVY_CACHE: .trivycache

container_scanning:
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
  image:
    name: bitnami/trivy:latest
    entrypoint: [""]
  stage: scan
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only --no-progress
    # Build reports
    - time mkdir .trivy-reports
    - time trivy image --exit-code 0 --no-progress --format template --template "@html.tpl" --output .trivy-reports/gl-container-scanning-report.html "$FULL_IMAGE_NAME"
    - time trivy image --exit-code 0 --no-progress --format template --template "@gitlab.tpl" --output .trivy-reports/gl-container-scanning-report.json "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy image --exit-code 0 --no-progress "$FULL_IMAGE_NAME"
  cache:
    paths:
      - html.tpl
      - gitlab.tpl
  artifacts:
    expire_in: 1h
    paths:
      - .trivy-reports/

container_checking:
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
  image:
    name: bitnami/trivy:latest
    entrypoint: [""]
  stage: scan
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only --no-progress
    # Fail on critical vulnerabilities
    - time trivy image --exit-code 1 --severity CRITICAL --no-progress "$FULL_IMAGE_NAME"
  allow_failure:
    exit_codes: 1
  cache:
    paths:
      - html.tpl
      - gitlab.tpl
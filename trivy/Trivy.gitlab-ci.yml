get_template_for_container_scanning:
  image: 
    name: alpine:latest
  script:
    # download template
    - cd 
    - time curl --remote-name https://gitlab.with.de/packages-and-registries/gitlab-ci.yml/-/raw/main/trivy/html.tpl
  cache:
    paths:
      - html.tpl

container_scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  needs:
    - get_template_for_container_scanning
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_CACHE: ".trivycache/"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy --download-db-only --no-progress --cache-dir $TRIVY_CACHE
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --exit-code 0 --cache-dir $TRIVY_CACHE --no-progress --format template --template "@html.tpl" 
      --output "$CI_PROJECT_DIR/${TRIVYCACHE}gl-container-scanning-report.html" image "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy --exit-code 0 --cache-dir $TRIVY_CACHE --no-progress image "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy --exit-code 1 --cache-dir $TRIVY_CACHE --severity CRITICAL --no-progress image "$FULL_IMAGE_NAME"
  cache:
    paths:
      - $TRIVY_CACHE
